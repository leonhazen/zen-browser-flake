name: update-to-latest

on:
    schedule:
        - cron: "0 0 * * *"
    workflow_dispatch:

env:
    SOURCE_REPO: zen-browser/desktop

permissions:
    contents: write
    pull-requests: write

jobs:
    check-version:
        runs-on: ubuntu-latest
        outputs:
            current-version: ${{ steps.version-check.outputs.current-version }}
            latest-version: ${{ steps.version-check.outputs.latest-version }}
            latest-version-name: ${{ steps.version-check.outputs.latest-version-name }}
            upgrade-branch: ${{ steps.version-check.outputs.upgrade-branch }}
            open-upgrade-prs: ${{ steps.version-check.outputs.open-upgrade-prs }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4.2.1

            - id: version-check
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
              
                  # Get release flagged as latest
                  latest==$(gh release list --repo zen-browser/desktop --limit 5 --exclude-pre-releases --json tagName,name,isLatest | jq '.[] | select(.isLatest == true)')

                  # Pull out version info
                  latest-version=$(echo $latest | jq -r '.tagName')
                  latest-version-name=$(echo $latest | jq -r '.name')
                  upgrade-branch="upgrade-to-$latest-version"
                  open-upgrade-prs=$(gh pr list --author '@me' --head $upgrade-branch --state open --json id --jq '. | length')
                  
                  # Set outputs
                  echo "current-version=$(cat VERSION)" >> $GITHUB_OUTPUT
                  echo "latest-version=$latest-version" >> $GITHUB_OUTPUT
                  echo "upgrade-branch=$upgrade-branch" >> $GITHUB_OUTPUT
                  echo "latest-version-name=$latest-version-name" >> $GITHUB_OUTPUT
                  echo "open-upgrade-prs=$open-upgrade-prs" >> $GITHUB_OUTPUT

    update:
        needs: check-version
        if: ${{ needs.check-version.outputs.current-version != needs.check-version.outputs.latest-version && needs.check-version.outputs.open-upgrade-prs == '0' }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4.2.1

            - name: Check Nix flake inputs
              uses: DeterminateSystems/flake-checker-action@v4

            - name: Install Nix
              uses: DeterminateSystems/nix-installer-action@main

            - uses: DeterminateSystems/magic-nix-cache-action@main

            - name: Update
              env:
                NEW_VERSION: ${{ needs.check-version.outputs.latest-version }}
                UPGRADE_BRANCH: ${{ needs.check-version.outputs.upgrade-branch }}
              run: |
                # Create and checkout new branch
                git checkout -b $UPGRADE_BRANCH
                
                # Update VERSION file
                echo $NEW_VERSION > VERSION
                
                # Update flake.nix
                sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" flake.nix
                
                # Get new SHA256 for generic and specific builds
                GENERIC_SHA=$(nix-prefetch-url --type sha256 --unpack "https://github.com/zen-browser/desktop/releases/download/${NEW_VERSION}/zen.linux-generic.tar.bz2")
                SPECIFIC_SHA=$(nix-prefetch-url --type sha256 --unpack "https://github.com/zen-browser/desktop/releases/download/${NEW_VERSION}/zen.linux-specific.tar.bz2")
                
                # Update SHA256 in flake.nix
                sed -i 's|sha256 = "sha256:.*"; # generic|sha256 = "sha256:'$GENERIC_SHA'"; # generic|' flake.nix
                sed -i 's|sha256 = "sha256:.*"; # specific|sha256 = "sha256:'$SPECIFIC_SHA'"; # specific|' flake.nix

            - name: Build
              run: |
                nix flake update
                nix build

            - name: Raise PR
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                NEW_VERSION: ${{ needs.check-version.outputs.latest-version }}
                CURRENT_VERSION: ${{ needs.check-version.outputs.current-version }}
                NEW_VERSION_NAME: ${{ needs.check-version.outputs.latest-version-name }}
                UPGRADE_BRANCH: ${{ needs.check-version.outputs.upgrade-branch }}
              run: |
                # Commit changes
                git config user.name "github-actions[bot]"
                git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                git add VERSION flake.nix flake.lock
                git commit -m "chore(release): bump zen browser to $NEW_VERSION"

                # Push changes
                git push -u origin $UPGRADE_BRANCH
                
                # Create pull request
                gh pr create \
                      --title "chore(release): bump zen browser to $NEW_VERSION" \
                      --body "$(cat << 'EOF'
                This PR updates Zen Browser to [$NEW_VERSION_NAME](https://github.com/zen-browser/desktop/releases/tag/${NEW_VERSION}).
                - current version: [$CURRENT_VERSION](https://github.com/zen-browser/desktop/releases/tag/${CURRENT_VERSION}).

                ## Changes
              
                - Updated VERSION file
                - Updated flake.nix with new version and SHA256 hashes
                - Updated flake.lock
                EOF
                )" \
                      --base master \
                      --head $UPGRADE_BRANCH