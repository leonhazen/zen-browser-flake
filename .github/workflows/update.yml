name: update-to-latest

on:
    schedule:
        - cron: "0 * * * *"
    workflow_dispatch:

env:
    SOURCE_REPO: zen-browser/desktop

permissions:
    contents: write
    pull-requests: write

jobs:
    check-for-upgrade:
        runs-on: ubuntu-latest
        outputs:
            current-version: ${{ steps.version-check.outputs.current-version }}
            latest-version: ${{ steps.version-check.outputs.latest-version }}
            latest-version-name: ${{ steps.version-check.outputs.latest-version-name }}
            upgrade-branch: ${{ steps.version-check.outputs.upgrade-branch }}
            open-upgrade-prs: ${{ steps.version-check.outputs.open-upgrade-prs }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4.2.1

            - name: Check Nix flake inputs
              uses: DeterminateSystems/flake-checker-action@v4

            - id: version-check
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Get release flagged as latest
                  LATEST=$(gh release list --repo $SOURCE_REPO --limit 5 --exclude-pre-releases --json tagName,name,isLatest | jq '.[] | select(.isLatest == true)')

                  # Pull out version info
                  LATEST_VERSION=$(echo $LATEST | jq -r '.tagName')
                  LATEST_VERSION_NAME=$(echo "$LATEST" | jq -r '.name')
                  UPGRADE_BRANCH="upgrade-to-${LATEST_VERSION}"
                  OPEN_UPGRADE_PRS=$(gh pr list --author '@me' --head "$UPGRADE_BRANCH" --state open --json id --jq '. | length')
                  
                  # Set outputs
                  echo "current-version=$(cat VERSION)" >> $GITHUB_OUTPUT
                  echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
                  echo "upgrade-branch=$UPGRADE_BRANCH" >> $GITHUB_OUTPUT
                  echo "latest-version-name=$LATEST_VERSION_NAME" >> $GITHUB_OUTPUT
                  echo "open-upgrade-prs=$OPEN_UPGRADE_PRS" >> $GITHUB_OUTPUT

    update:
        needs: check-for-upgrade
        if: ${{ needs.check-for-upgrade.outputs.current-version != needs.check-for-upgrade.outputs.latest-version && needs.check-for-upgrade.outputs.open-upgrade-prs == '0' }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4.2.1

            - name: Install Nix
              uses: DeterminateSystems/nix-installer-action@main

            - name: Update
              env:
                NEW_VERSION: ${{ needs.check-for-upgrade.outputs.latest-version }}
                UPGRADE_BRANCH: ${{ needs.check-for-upgrade.outputs.upgrade-branch }}
              run: |
                # Create and checkout new branch
                git checkout -b $UPGRADE_BRANCH
                
                # Update VERSION file
                echo "$NEW_VERSION" > VERSION
                
                # Update flake.nix
                sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" flake.nix
                
                # Get new SHA256 for build
                NEW_SHA=$(nix-prefetch-url --type sha256 --unpack "https://github.com/zen-browser/desktop/releases/download/${NEW_VERSION}/zen.linux-x86_64.tar.xz")

                # Update SHA256 in flake.nix
                sed -i 's|sha256 = "sha256:.*";|sha256 = "sha256:'$NEW_SHA'";|' flake.nix

            - name: Build
              run: |
                nix flake update
                nix build

            - name: Raise PR
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                NEW_VERSION: ${{ needs.check-for-upgrade.outputs.latest-version }}
                CURRENT_VERSION: ${{ needs.check-for-upgrade.outputs.current-version }}
                NEW_VERSION_NAME: ${{ needs.check-for-upgrade.outputs.latest-version-name }}
                UPGRADE_BRANCH: ${{ needs.check-for-upgrade.outputs.upgrade-branch }}
              run: |
                # Commit changes
                git config user.name "github-actions[bot]"
                git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                git add VERSION flake.nix flake.lock
                git commit -m "chore(release): bump zen browser to ${NEW_VERSION}"

                # Push changes
                git push -u origin $UPGRADE_BRANCH
                
                # Create pull request
                gh pr create \
                      --title "chore(release): bump zen browser to ${NEW_VERSION}" \
                      --body "$(cat << EOF
                This PR updates Zen Browser to [${NEW_VERSION_NAME}](https://github.com/zen-browser/desktop/releases/tag/${NEW_VERSION}).

                Current version in flake: [${CURRENT_VERSION}](https://github.com/zen-browser/desktop/releases/tag/${CURRENT_VERSION}).
                
                - [Changes - Github](https://github.com/zen-browser/desktop/compare/${CURRENT_VERSION}...${NEW_VERSION})
                - [Release Notes](https://zen-browser.app/release-notes#${NEW_VERSION})

                ## Changes

                Confirm these 3 changes exist in this PR before merging.
              
                - Updated VERSION file
                - Updated flake.nix with new version and SHA256 hashes
                - Updated flake.lock
                EOF
                )" \
                      --base master \
                      --head $UPGRADE_BRANCH \
                      --assignee leonhazen
